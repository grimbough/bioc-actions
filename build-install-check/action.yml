name: 'Install, Build, Check'
author: Mike L. Smith
inputs:
  package-directory:
    description: 'Path to the package directory.  The default value of `.` assumes the git repository is the package. Provide a path if the package is located in a sub-folder.'
    required: false
    default: '.'
    
outputs:
  source-tarball:
    description: 'Path to to the tar.gz file produced by running R CMD build <PKG>.'
    value: ${{ steps.return-paths.outputs.pkg-tarball }}
  check-dir:
    description: 'Path to the directory produced by running R CMD check <PKG>.  This has the name <PKG>.Rcheck.'
    value: ${{ steps.return-paths.outputs.check-dir }}
  package-binary:
    description: 'Path to the package binary produced by R CMD INSTALL --build.  The file name will be dependent on the operating system of the runner.'
    value: ${{ steps.return-paths.outputs.pkg-binary }}
  install-log:
    description: 'Path to the file containing the output from R CMD INSTALL <PKG>.  This will have the name <PKG>.install-out.txt.'
    value: ${{ steps.install-package.outputs.install-log }}

runs:
  using: "composite"
  steps:
  
  - name: Test for docker
    run: |
      ## Test whether we're in a Bioc Docker Container
      if [[ ! -z ${BIOCONDUCTOR_DOCKER_VERSION} ]]; then 
        echo IN_BIOC_DOCKER=true >> ${GITHUB_ENV}; 
        ## not sure why the docker image needs this update.  Maybe do elsewhere.
        sudo apt-get -qq update
      else 
        echo IN_BIOC_DOCKER=false >> ${GITHUB_ENV}; 
      fi
    shell: bash
  
  - name: Test for latex installation
    run: |
      ## Testing for existing latex installation"
      if ! command -v pdflatex &> /dev/null
      then
        echo LATEX_NEEDED=true >> ${GITHUB_ENV};
      else
        echo LATEX_NEEDED=false >> ${GITHUB_ENV};
      fi
    shell: bash
  
  - name: Install TinyTex
    if: env.LATEX_NEEDED == 'true'
    uses: r-lib/actions/setup-tinytex@v2
    env:
      # we are waiting on a fix for tlmgr not being in the path, so use an older version
      TINYTEX_VERSION: 2023.02
    
  - name: Install latex fonts
    if: runner.os == 'Windows'
    run: |
      tlmgr update --self && tlmgr install courier makeindex
    shell: pwsh
  
  - id: find-working-dir
    run: |
      ## determine the working directory
      if [[ ${{ inputs.package-directory }} == "." ]]; then
        echo "pkg-name=$(echo ${PWD##*/})" >> $GITHUB_OUTPUT
        echo "pkg-dir=$(echo ${PWD##*/})" >> $GITHUB_OUTPUT
        echo "working-dir=$(echo '../')" >> $GITHUB_OUTPUT
      else
        echo "pkg-name=$(basename ${{ inputs.package-directory }})" >> $GITHUB_OUTPUT
        echo "pkg-dir=$(echo ${{ inputs.package-directory }})" >> $GITHUB_OUTPUT
        echo "working-dir=$(echo './')" >> $GITHUB_OUTPUT
      fi
    shell: bash
    
  - id: set-r-libs-user
    run: |
      if [[ -z ${R_LIBS_USER} ]]; then 
        R_LIBS_USER=${RUNNER_TEMP}/R-lib
        echo R_LIBS_USER="${R_LIBS_USER}" >> ${GITHUB_ENV}
        mkdir -p ${R_LIBS_USER}
      fi
      echo "dir=$(echo ${R_LIBS_USER})" >> $GITHUB_OUTPUT
    shell: bash
    
  - id: install-package
    run: |
      INSTALL_LOG=$(Rscript -e "cat(file.path(getwd(), '${{ steps.find-working-dir.outputs.pkg-name }}.install-out.txt'))")
      echo "install-log=$(echo $INSTALL_LOG)" >> $GITHUB_OUTPUT
      R CMD INSTALL ${{ steps.find-working-dir.outputs.pkg-dir }} &> ${{ steps.find-working-dir.outputs.pkg-name }}.install-out.txt
    shell: bash
    working-directory: ${{ steps.find-working-dir.outputs.working-dir }}
    
  - id: show-install-log
    if: always()
    run: |
      cat ${{ steps.find-working-dir.outputs.pkg-name }}.install-out.txt
    shell: bash
    working-directory: ${{ steps.find-working-dir.outputs.working-dir }}    
    
  - id: build-package
    run: |
      R CMD build --keep-empty-dirs --no-resave-data ${{ steps.find-working-dir.outputs.pkg-dir }}
      echo "pkg-tarball=$(echo ${{ steps.find-working-dir.outputs.pkg-name }}_*.tar.gz)" >> $GITHUB_OUTPUT
    shell: bash
    working-directory: ${{ steps.find-working-dir.outputs.working-dir }}
    
  - id: check-package
    run: |
      mkdir -p ${{ steps.find-working-dir.outputs.pkg-dir }}.Rcheck
      CHECKDIR=$(Rscript -e "cat(normalizePath('${{ steps.find-working-dir.outputs.pkg-dir }}.Rcheck'))")
      echo "check-dir=$(echo $CHECKDIR)" >> $GITHUB_OUTPUT
      R CMD check --install=check:${{ steps.find-working-dir.outputs.pkg-name }}.install-out.txt --library="${{ steps.set-r-libs-user.outputs.dir }}" --no-vignettes --timings ${{ steps.build-package.outputs.pkg-tarball }}
    shell: bash
    working-directory: ${{ steps.find-working-dir.outputs.working-dir }}
    
  - id: build-binary
    run: |
      ## Add rtools/usr/bin so the "zip" command is found
      if [[ ${RUNNER_OS} == "Windows" ]]; then
        PATH=${PATH}:$(Rscript -e "cat(gsub('C:\\\\\\\\', '/c/', Sys.getenv('RTOOLS40_HOME')), 'usr/bin/', sep='/')")
        PATH=${PATH}:$(Rscript -e "cat(gsub('C:\\\\\\\\', '/c/', Sys.getenv('RTOOLS42_HOME')), 'usr/bin/', sep='/')")
        export PATH
      fi;
      mkdir ${{ steps.find-working-dir.outputs.pkg-name }}.buildbin-libdir 
      R CMD INSTALL --build --library=${{ steps.find-working-dir.outputs.pkg-name }}.buildbin-libdir ${{ steps.build-package.outputs.pkg-tarball }}
    shell: bash
    working-directory: ${{ steps.find-working-dir.outputs.working-dir }}

  - id: return-paths
    run: |
      TARBALL=$(Rscript -e "cat(normalizePath('${{ steps.find-working-dir.outputs.working-dir }}${{ steps.build-package.outputs.pkg-tarball }}'))")
      BINARY=$(Rscript -e "cat(normalizePath(list.files(path = '${{ steps.find-working-dir.outputs.working-dir }}', pattern = '^${{ steps.find-working-dir.outputs.pkg-dir }}.*(zip|tgz|gnu.tar.gz)$', full.names = TRUE)))")
      echo "pkg-tarball=$(echo $TARBALL)" >> $GITHUB_OUTPUT
      echo "pkg-binary=$(echo $BINARY)" >> $GITHUB_OUTPUT
    shell: bash
    
